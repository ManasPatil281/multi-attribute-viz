service: streamline-analyst

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  environment:
    GROQ_API_KEY: ${env:GROQ_API_KEY}
    AWS_REGION: ${env:AWS_REGION}
    AWS_DYNAMODB_TABLE_NAME: ${env:AWS_DYNAMODB_TABLE_NAME}
    AWS_S3_BUCKET_NAME: ${env:AWS_S3_BUCKET_NAME}
    JWT_SECRET: ${env:JWT_SECRET}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - cognito-idp:*
          Resource:
            - arn:aws:cognito-idp:${self:provider.region}:*:userpool/${env:AWS_COGNITO_USER_POOL_ID}
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${env:AWS_DYNAMODB_TABLE_NAME}
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::${env:AWS_S3_BUCKET_NAME}
            - arn:aws:s3:::${env:AWS_S3_BUCKET_NAME}/*

custom:
  nextConfigDir: ./

plugins:
  - serverless-nextjs-plugin

streamlineAnalyst:
  component: '@sls-next/serverless-component@3.7.0'

  inputs:
    bucketName: streamline-analyst-bucket-${sls:stage}
    
    name:
      defaultLambda: streamline-analyst-${sls:stage}
      apiLambda: streamline-analyst-api-${sls:stage}
      imageLambda: streamline-analyst-image-${sls:stage}
    
    runtime:
      defaultLambda: nodejs20.x
      apiLambda: nodejs20.x
      imageLambda: nodejs20.x
    
    memory:
      defaultLambda: 1024
      apiLambda: 1024
      imageLambda: 512
    
    timeout:
      defaultLambda: 30
      apiLambda: 30
      imageLambda: 30
    
    build:
      args:
        - build
      env:
        GROQ_API_KEY: ${env:GROQ_API_KEY}
        AWS_REGION: ${env:AWS_REGION}
        AWS_DYNAMODB_TABLE_NAME: ${env:AWS_DYNAMODB_TABLE_NAME}
        AWS_S3_BUCKET_NAME: ${env:AWS_S3_BUCKET_NAME}
        JWT_SECRET: ${env:JWT_SECRET}

# Separate CloudFormation resources
resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:AWS_DYNAMODB_TABLE_NAME, 'cc-mini-proj-dynamo'}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH

    CSVBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:AWS_S3_BUCKET_NAME, 'cc-mini-project-nid'}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
              AllowedHeaders:
                - '*'
              MaxAge: 3000
